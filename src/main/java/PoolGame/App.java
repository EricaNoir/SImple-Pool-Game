/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package PoolGame;

import java.awt.*;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

import PoolGame.Items.Ball;
import PoolGame.Items.Pocket;
import PoolGame.Items.PoolTable;
import PoolGame.Memento.Caretaker;
import PoolGame.Memento.Memento;
import PoolGame.Memento.Originator;
import PoolGame.Observer.*;
import javafx.event.EventHandler;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.KeyCode;
import javafx.scene.text.Text;
import javafx.util.converter.IntegerStringConverter;
import org.json.simple.parser.ParseException;

import PoolGame.ConfigReader.ConfigKeyMissingException;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.stage.Stage;
import javafx.util.Duration;
import javafx.scene.shape.Rectangle;
import javafx.scene.paint.Color;

/** The JavaFX application */
public class App extends Application {

    private static final double FRAMETIME = 1.0 / 60.0;
    public static Originator originator = new Originator();
    public static Caretaker stateKeeper = new Caretaker();


    private ConfigReader loadConfig(List<String> args) {
        String configPath;
        boolean isResourcesDir = false;
		if (args.size() > 0) {
			configPath = args.get(0);
		} else {
			configPath = "/config_easy.json";
            isResourcesDir = true;
		}
		// parse the file:
        ConfigReader config = null;
        try {
            config = new ConfigReader(configPath, isResourcesDir);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            System.err.printf("ERROR: %s\n", e.getMessage());
            System.exit(1);
        } catch (IOException e) {
            e.printStackTrace();
            System.err.printf("ERROR: %s\n", e.getMessage());
            System.exit(1);
        } catch (ParseException e) {
            e.printStackTrace();
            System.err.printf("ERROR: %s\n", e.getMessage());
            System.exit(1);
        } catch (ConfigKeyMissingException e) {
            e.printStackTrace();
            System.err.printf("ERROR: %s\n", e.getMessage());
            System.exit(1);
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
            System.err.printf("ERROR: %s\n", e.getMessage());
            System.exit(1);
        }
        return config;
    }

    @Override
    public void start(Stage stage) {

        // default config
        ConfigReader config = loadConfig(getParameters().getRaw());
        Game game = new Game(config);
        loadGame(stage, game);

        Timeline timeline = new Timeline();
        timeline.setCycleCount(Timeline.INDEFINITE);
        KeyFrame frame = new KeyFrame(Duration.seconds(FRAMETIME),
                (actionEvent) -> {
                    game.tick();
                });

        timeline.getKeyFrames().add(frame);
        timeline.play();
        originator.stateInit(game);
        stateKeeper.setMemento(originator.SaveState(false));
    }

    /**
     *
     */
    public static void loadGame(Stage stage, Game game) {
        Group root = new Group();
        Scene scene = new Scene(root);
        stage.setScene(scene);
        stage.setTitle("PoolGame");
        stage.show();

        Canvas canvas = new Canvas(game.getWindowDimX(), game.getWindowDimY());

        //EricaChange change the game screen size for timer, score and instruction
        stage.setWidth(game.getWindowDimX() + 16);// Magic number to get bottom to align
        stage.setHeight(game.getWindowDimY() + 250);// Magic number to get bottom to align

        root.getChildren().add(canvas);

        game.addDrawables(root);


        // Press 1 2 3 to change game mode
        scene.setOnKeyPressed(new EventHandler<KeyEvent>() {
            @Override
            public void handle(KeyEvent event) {
                // Valid keys for cheating
                List<KeyCode> validKeys = new ArrayList<KeyCode>();
                validKeys.add(KeyCode.R);
                validKeys.add(KeyCode.Y);
                validKeys.add(KeyCode.G);
                validKeys.add(KeyCode.W);
                validKeys.add(KeyCode.B);
                validKeys.add(KeyCode.P);
                validKeys.add(KeyCode.K);
                validKeys.add(KeyCode.O);

                // press 1 to easy mode
                if (event.getCode() == KeyCode.DIGIT1 || event.getCode() == KeyCode.NUMPAD1) {
                    System.out.println("Game reset to EASY mode.");
                    try {
                        stateKeeper.setMemento(originator.SaveState(true));
                        ConfigReader config = new ConfigReader("/config_easy.json", true);
                        Game game_easy = new Game(config);
                        game.setTable(game_easy.getPoolTable());
                        game.shownWonText = game_easy.shownWonText;
                        game.setWonTextVisible(game.shownWonText);
                        loadGame(stage, game);
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    } catch (ParseException e) {
                        throw new RuntimeException(e);
                    } catch (ConfigKeyMissingException e) {
                        throw new RuntimeException(e);
                    }
                }

                // press 2 to normal mode
                else if (event.getCode() == KeyCode.DIGIT2 || event.getCode() == KeyCode.NUMPAD2) {
                    System.out.println("Game reset to NORMAL mode.");
                    try {
                        stateKeeper.setMemento(originator.SaveState(true));
                        ConfigReader config = new ConfigReader("/config_normal.json", true);
                        Game game_normal = new Game(config);
                        game.setTable(game_normal.getPoolTable());
                        game.shownWonText = game_normal.shownWonText;
                        game.setWonTextVisible(game.shownWonText);
                        loadGame(stage, game);
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    } catch (ParseException e) {
                        throw new RuntimeException(e);
                    } catch (ConfigKeyMissingException e) {
                        throw new RuntimeException(e);
                    }
                }

                // press 3 to hard mode
                else if (event.getCode() == KeyCode.DIGIT3 || event.getCode() == KeyCode.NUMPAD3) {
                    System.out.println("Game reset to HARD mode.");
                    try {
                        stateKeeper.setMemento(originator.SaveState(true));
                        ConfigReader config = new ConfigReader("/config_hard.json", true);
                        Game game_hard = new Game(config);
                        game.setTable(game_hard.getPoolTable());
                        game.shownWonText = game_hard.shownWonText;
                        game.setWonTextVisible(game.shownWonText);
                        loadGame(stage, game);
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    } catch (ParseException e) {
                        throw new RuntimeException(e);
                    } catch (ConfigKeyMissingException e) {
                        throw new RuntimeException(e);
                    }
                }

                // Keys for cheat
                else if (validKeys.contains(event.getCode())) {
                    // Create subject and observers to handle the key event
                    CheatSubject subject = new CheatSubject();
                    BallObserver ballObserver = new BallObserver(game);
                    ScoreObserver scoreObserver = new ScoreObserver(game);
                    StateKeeperObserver stateKeeperObserver = new StateKeeperObserver(game);
                    subject.attach(ballObserver);
                    subject.attach(scoreObserver);
                    subject.attach(stateKeeperObserver);

                    // stateKeeper update inside method cheat()
                    subject.notifyObservers(event.getCode());
                }

                // Key for Undo
                else if (event.getCode() == KeyCode.Z) {
                    originator.RecoverState(stateKeeper.getMemento());
                    loadGame(stage, game);
                    game.setGameTime(stateKeeper.getMemento().getGameTime());
                    game.setGameScore(stateKeeper.getMemento().getGameScore());
                }
            }
        });



    }



    /**
     * The entry point of the program
     * @param args CLI arguments
     */
    public static void main(String[] args) {
        launch(args);
    }
}
